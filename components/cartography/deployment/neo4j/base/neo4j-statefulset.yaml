---
apiVersion: 'apps/v1'
kind: StatefulSet
metadata:
  name: neo4j-statefulset
spec:
  serviceName: neo4j-statefulset
  replicas: 1
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: 'vault-agent'
        # NEO4J PASSWORD FROM VAULT
        vault.hashicorp.com/agent-inject-secret-neo4j-password: 'secret/data/cartography/neo4j-password'
        vault.hashicorp.com/agent-inject-template-neo4j-password: |
          {{ with secret "secret/data/cartography/neo4j-password" -}}
            NEO4J_SECRETS_PASSWORD="{{ .Data.data.NEO4J_SECRETS_PASSWORD }}"
          {{- end }}
        ## END OF NEO4J PASSWORD SETUP
    spec:
      serviceAccountName: vault-agent
      containers:
        - name: neo4j-statefulset
          image: //third_party/docker:neo4j
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
              value: 'true'
            - name: NUMBER_OF_CORES
              value: '1'
            - name: AUTH_ENABLED
              value: 'true'
            - name: NEO_HOSTNAME
              value: 'neo4j-bolt-service'
            - name: SSL_FOLDER
              value: '/var/lib/neo4j/ssl'
          command:
            - '/bin/bash'
            - '-c'
            - |
              # Populate env vars from secrets
              #   - NEO4J_SECRETS_PASSWORD
              export $(grep -v '#.*' /vault/secrets/neo4j-password | xargs)

              #Â Setup folders
              mkdir -p ${SSL_FOLDER}/client_policy/trusted
              mkdir -p ${SSL_FOLDER}/client_policy/revoked
              chmod -R a+rw ${SSL_FOLDER}

              # Setup Neo4j config
              #   - Prefix with NEO4J_.
              #   - Underscores must be written twice: _ is written as __.
              #   - Periods are converted to underscores: . is written as _.
              #
              # TODO: re-enable password auth
              #
              # export NEO4J_dbms_security_auth__enabled=true
              # export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"

              #
              # Global Configs
              #
              export NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
              export NEO4J_dbms_connectors_default__advertised__address=${NEO_HOSTNAME}

              #
              # Setup SSL - Folders
              #
              export NEO4J_dbms_ssl_policy_client__policy_base__directory=${SSL_FOLDER}/client_policy
              export NEO4J_dbms_ssl_policy_client__policy_trusted__dir=${SSL_FOLDER}/client_policy/trusted
              export NEO4J_dbms_ssl_policy_client__policy_revoked__dir=${SSL_FOLDER}/client_policy/revoked

              #
              # Setup SSL - Certificates
              #
              export NEO4J_dbms_ssl_policy_client__policy_private__key=/etc/certs/server_key.pem
              export NEO4J_dbms_ssl_policy_client__policy_public__certificate=/etc/certs/server_chain.pem
              cp /etc/certs/server_chain.pem ${SSL_FOLDER}/client_policy/trusted/

              #
              # Setup SSL - Enable policy
              #
              export NEO4J_https_ssl__policy=client_policy
              export NEO4J_bolt_ssl__policy=client_policy
              export NEO4J_dbms_ssl_policy_client__policy_client__auth=NONE
              export NEO4J_dbms_connector_bolt_tls__level=OPTIONAL

              #
              # Run Neo4j
              #
              echo "Starting Neo4j...."
              exec /docker-entrypoint.sh "neo4j"
          ports:
            - name: discovery
              containerPort: 5000
            - name: raft
              containerPort: 7000
            - name: tx
              containerPort: 6000
            - name: http
              containerPort: 7474
            - name: https
              containerPort: 7473
            - name: bolt
              containerPort: 7687
          resources:
            requests:
              memory: 512Mi
              cpu: '0.1'
            limits:
              memory: 1Gi
              cpu: '0.2'
          volumeMounts:
            - name: datadir
              mountPath: '/data'
            - name: neo4j-certs-volume
              mountPath: /etc/certs/
              readOnly: true
      volumes:
        - name: neo4j-certs-volume
          secret:
            secretName: neo4j-bolt-tls
            items:
              - key: tls.key
                path: server_key.pem
              - key: tls.crt
                path: server_chain.pem
